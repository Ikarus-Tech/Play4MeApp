{"ast":null,"code":"var _jsxFileName = \"D:\\\\Felizardo\\\\Ikarus\\\\Projectos\\\\Play4Me\\\\App\\\\client\\\\src\\\\components\\\\Venue\\\\RequestList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport RequestItem from \"./RequestItem\";\nimport { io } from \"socket.io-client\";\n\n// Definindo a URL do servidor Socket.IO (pode ser configurada via variável de ambiente)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || \"http://localhost:8081\";\nconst RequestList = ({\n  userId,\n  requests\n}) => {\n  _s();\n  //const [requests, setRequests] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Inicializa a conexão do socket\n    const socket = io(SOCKET_URL);\n\n    // Função para buscar as requisições\n    const fetchRequests = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:8081/getrequests\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}` // Adiciona token JWT ao cabeçalho\n          }\n        });\n        setRequests(response.data); // Define os dados recebidos como estado\n      } catch (err) {\n        console.error(\"Erro ao buscar requisições:\", err);\n        setError(\"Não foi possível carregar as requisições.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Buscar as requisições assim que o componente for montado\n    fetchRequests();\n    setRequests(prevRequests => [{\n      ...data,\n      cliente: {\n        nome: data.clienteNome\n      } // Mapeia o clienteNome recebido\n    }, ...prevRequests]);\n\n    // Escutar por novas requisições via WebSocket\n    if (userId) {\n      console.log(userId);\n      socket.on(`venue-${userId}`, newRequest => {\n        console.log(\"Nova requisição recebida:\", newRequest);\n\n        // Adicionar nova requisição ao estado\n        setRequests(prevRequests => [newRequest, ...prevRequests]);\n      });\n\n      // Limpar listener ao desmontar ou quando userId mudar\n      return () => {\n        socket.off(`venue-${userId}`);\n      };\n    }\n  }, [userId]); // Recarrega quando userId mudar\n\n  // Função para atualizar uma requisição após a ação de aprovar/negara música\n  const handleUpdateRequest = updatedRequest => {\n    setRequests(prevRequests => prevRequests.map(request => request.requisicao_id === updatedRequest.requisicao_id ? updatedRequest : request));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"request-list\",\n    children: [requests.map(request => {\n      // Filtra as músicas com status \"PENDING\"\n      const pendingMusicas = request.musicas.filter(musica => musica.status_text === \"PENDING\");\n      if (pendingMusicas.length === 0) {\n        return null; // Não renderiza requisições sem músicas com status \"PENDING\"\n      }\n      return /*#__PURE__*/_jsxDEV(RequestItem, {\n        request: {\n          ...request,\n          musicas: pendingMusicas\n        },\n        onUpdateRequest: handleUpdateRequest // Passa a função para atualizar a requisição\n      }, request.requisicao_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this);\n    }).filter(Boolean), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(RequestList, \"SXWAzFwbcALCYWswwJxoaTIbO8U=\");\n_c = RequestList;\nexport default RequestList;\nvar _c;\n$RefreshReg$(_c, \"RequestList\");","map":{"version":3,"names":["React","useEffect","useState","axios","RequestItem","io","jsxDEV","_jsxDEV","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","RequestList","userId","requests","_s","loading","setLoading","error","setError","socket","fetchRequests","response","get","headers","Authorization","localStorage","getItem","setRequests","data","err","console","prevRequests","cliente","nome","clienteNome","log","on","newRequest","off","handleUpdateRequest","updatedRequest","map","request","requisicao_id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","pendingMusicas","musicas","filter","musica","status_text","length","onUpdateRequest","Boolean","_c","$RefreshReg$"],"sources":["D:/Felizardo/Ikarus/Projectos/Play4Me/App/client/src/components/Venue/RequestList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport RequestItem from \"./RequestItem\";\r\nimport { io } from \"socket.io-client\";\r\n\r\n// Definindo a URL do servidor Socket.IO (pode ser configurada via variável de ambiente)\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || \"http://localhost:8081\";\r\n\r\nconst RequestList = ({ userId, requests }) => {\r\n  //const [requests, setRequests] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Inicializa a conexão do socket\r\n    const socket = io(SOCKET_URL);\r\n\r\n    // Função para buscar as requisições\r\n    const fetchRequests = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:8081/getrequests\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Adiciona token JWT ao cabeçalho\r\n          },\r\n        });\r\n        setRequests(response.data); // Define os dados recebidos como estado\r\n      } catch (err) {\r\n        console.error(\"Erro ao buscar requisições:\", err);\r\n        setError(\"Não foi possível carregar as requisições.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Buscar as requisições assim que o componente for montado\r\n    fetchRequests();\r\n\r\n    setRequests((prevRequests) => [\r\n      {\r\n        ...data,\r\n        cliente: { nome: data.clienteNome }, // Mapeia o clienteNome recebido\r\n      },\r\n      ...prevRequests,\r\n    ]);\r\n    \r\n\r\n    // Escutar por novas requisições via WebSocket\r\n    if (userId) {\r\n      console.log(userId)\r\n      socket.on(`venue-${userId}`, (newRequest) => {\r\n        console.log(\"Nova requisição recebida:\", newRequest);\r\n\r\n        // Adicionar nova requisição ao estado\r\n        setRequests((prevRequests) => [newRequest, ...prevRequests]);\r\n      });\r\n\r\n      // Limpar listener ao desmontar ou quando userId mudar\r\n      return () => {\r\n        socket.off(`venue-${userId}`);\r\n      };\r\n    }\r\n  }, [userId]); // Recarrega quando userId mudar\r\n\r\n  // Função para atualizar uma requisição após a ação de aprovar/negara música\r\n  const handleUpdateRequest = (updatedRequest) => {\r\n    setRequests((prevRequests) =>\r\n      prevRequests.map((request) =>\r\n        request.requisicao_id === updatedRequest.requisicao_id\r\n          ? updatedRequest\r\n          : request\r\n      )\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Carregando...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"request-list\">\r\n      {requests\r\n        .map((request) => {\r\n          // Filtra as músicas com status \"PENDING\"\r\n          const pendingMusicas = request.musicas.filter(\r\n            (musica) => musica.status_text === \"PENDING\"\r\n          );\r\n\r\n          if (pendingMusicas.length === 0) {\r\n            return null; // Não renderiza requisições sem músicas com status \"PENDING\"\r\n          }\r\n\r\n          return (\r\n            <RequestItem\r\n              key={request.requisicao_id}\r\n              request={{ ...request, musicas: pendingMusicas }}\r\n              onUpdateRequest={handleUpdateRequest} // Passa a função para atualizar a requisição\r\n            />\r\n          );\r\n        })\r\n        .filter(Boolean)} {/* Remove as requisições que não têm músicas com status \"PENDING\" */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}